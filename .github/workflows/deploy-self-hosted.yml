name: Deploy to Self-Hosted Server

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      
      - name: Build and push server image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/server/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/server:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build client static files
        run: |
          npm ci
          npm run build --workspace=@umbral-nexus/web
        env:
          VITE_API_URL: ${{ secrets.PRODUCTION_API_URL }}
          VITE_WS_URL: ${{ secrets.PRODUCTION_WS_URL }}
      
      - name: Create deployment package
        run: |
          mkdir -p deployment
          cp docker-compose.prod.yml deployment/docker-compose.yml
          cp -r nginx deployment/
          cp -r apps/web/dist deployment/client-build
          tar -czf deployment.tar.gz deployment/

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deployment.tar.gz
          retention-days: 1

  deploy:
    name: Deploy to Server
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
      - name: Download deployment artifact
        uses: actions/download-artifact@v4
        with:
          name: deployment-package
      
      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            # Create app directory
            mkdir -p ~/umbral-nexus
            cd ~/umbral-nexus
            
            # Backup current deployment
            if [ -d "deployment" ]; then
              mv deployment deployment.backup.$(date +%Y%m%d_%H%M%S)
            fi
            
            # Extract new deployment
            tar -xzf ~/deployment.tar.gz
            mv ~/deployment.tar.gz .
            
            # Update docker-compose with the new image
            cd deployment
            
            # Stop existing containers
            docker-compose down
            
            # Pull new images
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/server:latest
            
            # Start services
            docker-compose up -d
            
            # Clean up old backups (keep last 3)
            cd ..
            ls -dt deployment.backup.* | tail -n +4 | xargs rm -rf
            
            # Health check
            sleep 10
            curl -f http://localhost/health || exit 1
            
            echo "Deployment completed successfully!"

      - name: Cleanup SSH
        if: always()
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            rm -f ~/deployment.tar.gz