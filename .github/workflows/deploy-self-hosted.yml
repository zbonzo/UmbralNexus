name: Deploy to Self-Hosted Server

on:
  push:
    branches: [master]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-and-deploy:
    name: Build and Deploy to Self-Hosted Server
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --legacy-peer-deps --ignore-scripts
      
      - name: Build all packages
        run: npm run build
      
      - name: Build Docker image
        run: |
          docker build -f packages/server/Dockerfile -t umbralnexus-server:latest .
      
      - name: Prepare deployment directory
        run: |
          # Create deployment directory if it doesn't exist
          mkdir -p $HOME/umbral-nexus
          
          # Copy docker-compose file to deployment directory
          cp docker-compose.portainer.yml $HOME/umbral-nexus/docker-compose.yml
          
          # Update the image name in the compose file to use our local build
          sed -i 's|image: ghcr.io/zbonz/umbralnexus/server:latest|image: umbralnexus-server:latest|g' $HOME/umbral-nexus/docker-compose.yml
      
      - name: Deploy application
        run: |
          cd $HOME/umbral-nexus
          
          # Stop and remove existing containers (including orphans)
          docker-compose down --remove-orphans || true
          
          # Remove any conflicting containers by name
          docker rm -f umbral-nexus || true
          docker rm -f umbral-nexus-server || true
          
          # Start services with new image
          docker-compose up -d
          
          # Show running containers
          docker-compose ps
          
          # Show logs for debugging
          docker-compose logs --tail=50
      
      - name: Clean up old images
        run: |
          # Remove dangling images to save space
          docker image prune -f